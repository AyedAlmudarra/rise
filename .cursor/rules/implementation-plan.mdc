# Project Tasks

This document outlines the development tasks for the RISE platform.

---
# Project Tasks

This document outlines the development tasks for the RISE platform.

---

## Task 1: Initial Project Cleanup & Supabase Setup

*   **Status:** Done
*   **Summary:** Installed the `@supabase/supabase-js` client library via npm. Created the `.env` file in the `frontend` directory with `VITE_SUPABASE_URL` and `VITE_SUPABASE_ANON_KEY` variables. Added the Supabase client initialization logic in `frontend/src/lib/supabaseClient.ts`. Skipped template cleanup steps for now.
*   **Goal:** Prepare the template for RISE development and establish Supabase connection.
*   **Steps:**
    *   Install Supabase client: `cd frontend && npm install @supabase/supabase-js`. (Done)
    *   Create Supabase environment variables (`.env` file): `VITE_SUPABASE_URL` and `VITE_SUPABASE_ANON_KEY`. (Done)
    *   Set up Supabase client initialization (e.g., in `frontend/src/lib/supabaseClient.ts`). (Done)
    *   Commit changes. (Done)

---

## Task 2: Implement Basic User Authentication (Signup/Login)

*   **Status:** Done
*   **Summary:** Adapted the template's login view (`auth1/Login.tsx`) and form (`authforms/AuthLogin.tsx`) for RISE. Created a mock sign-in handler using MSW in `frontend/src/api/mocks/handlers/auth.ts` and integrated it into `mockHandlers.ts`. Updated `AuthLogin.tsx` to call `supabase.auth.signInWithPassword` (intercepted by MSW). Implemented protected routing using `ProtectedRoute.tsx` in `Router.tsx`. Added user session management via `AuthContext.tsx` and `AuthProvider`.
*   **Goal:** Implement core signup and login functionality using Supabase Auth and template components, leveraging MSW for initial UI feedback.
*   **Steps:**
    *   Adapt/create authentication views in `frontend/src/views/authentication/` for RISE. (Done - Adapted auth1/Login.tsx and authforms/AuthLogin.tsx)
    *   Define mock handlers in `frontend/src/api/mocks/` for relevant Supabase Auth endpoints. (Done - Created handlers/auth.ts with sign-in mock and added to mockHandlers.ts)
    *   Implement UI logic in auth views/forms to call Supabase Auth functions (intercepted by MSW initially). (Done - Updated AuthLogin.tsx to call supabase.auth.signInWithPassword)
    *   Set up protected routes in `frontend/src/routes/Router.tsx`. (Done - Created ProtectedRoute.tsx and applied it in Router.tsx)
    *   Manage user session state. (Done - Implemented AuthContext.tsx and wrapped app in AuthProvider)
    *   Commit changes. (Done)

---

## Task 3: Enhance Investor Registration Form

*   **Status:** Done
*   **Summary:** Added 'Preferred Industries', 'Preferred Geography', 'Company Description', 'Website', and 'LinkedIn Profile' fields to the `AuthRegisterInvestor.tsx` form component. Updated the corresponding mock API handler (`frontend/src/api/mocks/handlers/investor.ts`) to accept and log these new fields during registration simulation. Made the `RegisterInvestor.tsx` view scrollable to accommodate the longer form. Changed 'Preferred Industries' and 'Preferred Geography' inputs from simple text/selects to use Flowbite Checkbox groups for multiple selections.
*   **Goal:** Expand the investor registration form to capture more detailed information.
*   **Steps:**
    *   Add new fields to `AuthRegisterInvestor.tsx` form component. (Done)
    *   Update validation logic for new fields (if applicable). (Done - Basic `required` added)
    *   Modify the mock API handler (`handlers/investor.ts`) to accept and log the new fields. (Done)
    *   Ensure the `RegisterInvestor.tsx` view correctly renders the updated form. (Done)
    *   Adjust layout/styling as needed, ensuring the page is scrollable. (Done)
    *   Commit changes. (Done)

---

## Task 4: Implement Startup Registration Backend/Mock Handling

*   **Status:** Done
*   **Goal:** Ensure the data submitted via the `AuthRegisterStartup.tsx` form is correctly processed by the backend (initially using MSW mock handlers).
*   **Steps:**
    *   Create/update mock handlers in `frontend/src/api/mocks/handlers/startup.ts` (or similar) to intercept the Supabase insert call from `AuthRegisterStartup.tsx`. (Done)
    *   Ensure the mock handler correctly receives and logs all fields from the startup form. (Done)
    *   Test the complete startup registration flow from the UI to the mock handler. (Done)
    *   Add this task definition to `cursor_project_rules/project-tasks.md`. (Done)
    *   Commit changes. (Done)

---

## Task 5: Implement Basic Startup & Investor Dashboards

*   **Status:** Done
*   **Goal:** Create initial landing dashboards for logged-in Startup and Investor users, utilizing existing template components for structure and basic widgets/cards.
*   **Steps:**
    *   Define routes for `/startup/dashboard` and `/investor/dashboard` in `frontend/src/routes/Router.tsx`. Ensure these routes use the `ProtectedRoute` component and potentially the `FullLayout` component. (Done)
    *   Create new view files: `frontend/src/views/dashboards/StartupDashboard.tsx` and `frontend/src/views/dashboards/InvestorDashboard.tsx`. (Done)
    *   Inside `StartupDashboard.tsx` and `InvestorDashboard.tsx`, import and display a basic page title (e.g., "Startup Dashboard", "Investor Dashboard") and the user's name/email obtained from `AuthContext`. (Done)
    *   Select and integrate 1-2 relevant pre-built components (e.g., welcome card, simple stat card) from `frontend/src/components/dashboards/` or `frontend/src/components/widgets/` into each new dashboard view as placeholders for future content. (Done)
    *   Modify the login logic (likely in `frontend/src/views/authentication/authforms/AuthLogin.tsx` or `AuthContext.tsx`) to redirect users to `/startup/dashboard` or `/investor/dashboard` based on their role after successful login. (Done)
    *   Add this task definition to `cursor_project_rules/project-tasks.md`. (Done)
    *   Commit changes. (Done)

## Task 5.1: Refine Dashboard Placeholders with Role-Specific Components

*   **Status:** Done
*   **Goal:** Replace generic placeholder components on the Startup and Investor dashboards with more role-specific template components (from `components/dashboards/analytics/`) to better represent future functionality, using a consistent grid layout.
*   **Steps:**
    *   **Startup Dashboard (`StartupDashboard.tsx`):**
        *   Keep the `Congratulations` component.
        *   Remove `RecentTransactionCard`.
        *   Import and integrate `Products` (as placeholder for key metrics). (Done)
        *   Import and integrate `Customer` (as placeholder for investor interest). (Done)
        *   Arrange components in a `grid grid-cols-1 lg:grid-cols-2 gap-6` layout below the welcome message/user info. (Done)
    *   **Investor Dashboard (`InvestorDashboard.tsx`):**
        *   Keep the `Congratulations` component.
        *   Remove `RecentTransactionCard`.
        *   Import and integrate `LatestDeal` (as placeholder for deal flow/watchlist). (Done)
        *   Import and integrate `PopularProducts` (as placeholder for suggested startups). (Done)
        *   Arrange components in the same `grid grid-cols-1 lg:grid-cols-2 gap-6` layout below the welcome message/user info. (Done)
    *   Add this task definition to `cursor_project_rules/project-tasks.md`. (Done)
    *   Commit changes. (Done)

## Task 6: Enhance Startup Dashboard with Placeholders and Data Fetching

*   **Status:** Done
*   **Goal:** Structure the Startup Dashboard to dynamically display the logged-in startup's basic company information fetched from the (mocked) database and include clearly defined placeholder sections for future metrics, AI features, and investor interactions using Flowbite `Card` components and a grid layout.
*   **Detailed Steps:**

    1.  **Define Startup Data Type (Optional but Recommended):**
        *   Create an interface or type named `StartupProfile` (e.g., in a new file `frontend/src/types/database.ts` or similar) that accurately reflects the structure of the data stored in the `startups` table (based on the fields sent in `AuthRegisterStartup.tsx`: `user_id`, `name`, `description`, `industry`, `sector`, `operational_stage`, `location_city`, `num_customers`, `num_employees`, `annual_revenue`, `annual_expenses`, `kpi_cac`, `kpi_clv`, `kpi_retention_rate`, `kpi_conversion_rate`, `logo_url`, `pitch_deck_url`, plus Supabase auto-generated `id`, `created_at`). Ensure nullable fields are typed correctly (e.g., `string | null`). (Done)

    2.  **Implement Data Fetching in `StartupDashboard.tsx`:**
        *   Import `useState`, `useEffect` from React.
        *   Import `useAuth` from `../../context/AuthContext`.
        *   Import `supabase` from `../../lib/supabaseClient`.
        *   Import the `StartupProfile` type if created in step 1.
        *   Import `Spinner`, `Alert` from `flowbite-react`.
        *   Add state variables: `startupData`, `dataLoading`, `dataError`.
        *   Add `useEffect` hook with `[user]` dependency to fetch data using `supabase.from('startups').select('*').eq('user_id', user.id).single()`. Handle loading, success, and error states.
        *   Render loading (`Spinner`) and error (`Alert`) indicators conditionally.
        (Done)

    3.  **Create Company Overview Card:**
        *   Import `Card` from `flowbite-react`.
        *   Render a `Card` with title "Company Overview".
        *   Conditionally display `startupData.name`, `.industry`, `.operational_stage`, `.location_city`, `.description` if `!dataLoading && startupData`.
        *   Use fallback text (e.g., "N/A") for null/empty fields.
        *   Display "No company profile found." if `!dataLoading && !startupData && !dataError`.
        (Done)

    4.  **Remove Old Placeholders & Add New Placeholder Cards:**
        *   Remove imports and usage of `Products` and `Customer` components.
        *   Create four new `Card` components with appropriate titles ("Key Metrics", "AI Insights & Recommendations", "Funding Readiness Score", "Investor Interest") and placeholder paragraph content.
        (Done)

    5.  **Adjust Layout:**
        *   Use a main `div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mt-6"` below the welcome message/loading indicators.
        *   Place the "Company Overview" `Card` in the first column (e.g., `lg:col-span-1`).
        *   Place the other four placeholder `Card`s in the remaining two columns (e.g., two cards in `lg:col-span-1`, two cards in the last `lg:col-span-1`, possibly using nested grids or adjusting spans).
        (Done)

    6.  **Update Task Definition:**
        *   Add this task definition to `cursor_project_rules/project-tasks.md`. (Done)

    7.  **Commit:**
        *   Commit all changes. (Done)

## Task 7: Enhance Investor Dashboard with Placeholders and Data Fetching

*   **Status:** Done
*   **Goal:** Structure the Investor Dashboard to dynamically display the logged-in investor's basic information fetched from the (mocked) database and include clearly defined placeholder sections for deal flow, AI suggestions, and watchlist using Flowbite `Card` components and a grid layout.
*   **Detailed Steps:**

    1.  **Define Investor Data Type:**
        *   In `frontend/src/types/database.ts`, define an `InvestorProfile` interface reflecting the fields submitted by `AuthRegisterInvestor.tsx` (e.g., `user_id`, `job_title`, `company_name`, `preferred_industries`, `preferred_geography`, `preferred_stage`, `website`, `linkedin_profile`) plus Supabase auto-fields (`id`, `created_at`). Ensure array fields (`preferred_industries`, etc.) are typed correctly (e.g., `string[]`). (Done)

    2.  **Implement Data Fetching in `InvestorDashboard.tsx`:**
        *   Import necessary hooks (`useState`, `useEffect`), components (`Spinner`, `Alert`), types (`InvestorProfile`), context (`useAuth`), and Supabase client.
        *   Add state variables: `investorData`, `dataLoading`, `dataError`.
        *   Add `useEffect` hook (dependency `[user]`) to fetch data using `supabase.from('investors').select('*').eq('user_id', user.id).single()`. Handle loading, success, and error states.
        *   Render loading (`Spinner`) and error (`Alert`) indicators conditionally. (Done)

    3.  **Create Investor Overview Card:**
        *   Import `Card` from `flowbite-react`.
        *   Render a `Card` titled "Investor Profile Summary".
        *   Conditionally display `investorData` fields if available (e.g., `job_title`, `company_name`). Display arrays like `preferred_industries` appropriately (e.g., as a comma-separated string or list items).
        *   Use fallback text ("N/A") for missing fields.
        *   Display "No investor profile found." if data is fetched but null. (Done)

    4.  **Remove Old Placeholders & Add New Placeholder Cards:**
        *   Remove imports and usage of `LatestDeal` and `PopularProducts`.
        *   Create three new `Card` components with appropriate titles ("Deal Flow", "AI-Suggested Startups", "Watchlist Summary") and placeholder paragraph content. (Done)

    5.  **Adjust Layout:**
        *   Use a main `div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mt-6"` below the welcome message/loading indicators.
        *   Place the "Investor Profile Summary" `Card` in the first column (`lg:col-span-1`).
        *   Place the three new placeholder `Card`s ("Deal Flow", "AI-Suggested Startups", "Watchlist Summary") in the remaining two columns (`lg:col-span-2`), potentially using a nested grid or stacking them. (Done)

    6.  **Update Task Definition:**
        *   Add this detailed task definition to `cursor_project_rules/project-tasks.md`. (Done)

    7.  **Commit:**
        *   Commit all related changes. (Done)

## Task 8: Implement Mock Data Handlers for Profile Fetching

*   **Status:** Done
*   **Goal:** Create MSW handlers to intercept Supabase `GET` requests (specifically `.select().eq('user_id', ...).single()`) for the `startups` and `investors` tables, returning predefined mock profile data corresponding to the requested `user_id`. This will allow the dashboards to display data for users like `startup@rise.com`.
*   **Detailed Steps:**

    1.  **Define Mock Startup Profile Data (`startup.ts`):**
        *   **File:** `frontend/src/api/mocks/handlers/startup.ts`
        *   **Action:** Define `const mockStartupProfiles: { [userId: string]: StartupProfile }` mapping user IDs (e.g., `'mock-startup-uuid-1'`) to `StartupProfile` objects containing plausible data.
        *   **(Done)**

    2.  **Implement Startup Select Handler (`startup.ts`):**
        *   **File:** `frontend/src/api/mocks/handlers/startup.ts`
        *   **Action:** Add `http.get(\`${supabaseUrl}/rest/v1/startups\`, ...)` handler.
        *   Parse `request.url` to extract `user_id` from `?user_id=eq.USER_ID`.
        *   Check if `select=*` is present and `user_id` filter exists.
        *   Look up `user_id` in `mockStartupProfiles`.
        *   Return found profile object with status 200, or a 406 error object if not found (mimicking `.single()`).
        *   **(Done)**

    3.  **Define Mock Investor Profile Data & Handler (`investor.ts`):**
        *   **File:** `frontend/src/api/mocks/handlers/investor.ts` (New File)
        *   **Action:** Create file, define `const mockInvestorProfiles`, and implement `http.get(\`${supabaseUrl}/rest/v1/investors\`, ...)` handler similar to step 2, using `mockInvestorProfiles`.
        *   Export handlers as `investorHandlers`.
        *   **(Done)**

    4.  **Integrate Investor Handler (`mockHandlers.ts`):**
        *   **File:** `frontend/src/api/mocks/handlers/mockHandlers.ts`
        *   **Action:** Import `investorHandlers` and add `...investorHandlers` to the `mockHandlers` array.
        *   **(Done)**

    5.  **Update Task Definition:**
        *   Add this detailed task definition to `cursor_project_rules/project-tasks.md`. (Done)

    6.  **Commit:**
        *   Commit all related changes. (Done)

---

## Task 9: Connect Frontend to Real Supabase Backend

*   **Status:** Done (Pending RLS Verification)
*   **Goal:** Modify frontend components (Registration, Dashboards) to interact directly with Supabase tables (`startups`, `investors`) instead of relying on MSW mock handlers for core data operations (creation, fetching).
*   **Summary:** Updated `AuthRegisterStartup` to insert profile data into the `startups` table after successful sign-up. Confirmed `AuthRegisterInvestor` already had this logic. Verified `StartupDashboard` and `InvestorDashboard` fetch data directly from Supabase. Disabled relevant `GET` and `POST` mock handlers in MSW (`startup.ts`, `investor.ts`). Identified necessary Row Level Security (RLS) policies to be applied manually in Supabase.
*   **Detailed Steps:**
    1.  **Startup Registration Insertion:** Update `AuthRegisterStartup.tsx`'s submit handler... (Done)
    2.  **Investor Registration Insertion:** Update `AuthRegisterInvestor.tsx`'s submit handler... (Done - Already implemented)
    3.  **Startup Dashboard Fetching:** Verify/update `StartupDashboard.tsx`... (Done - Already implemented)
    4.  **Investor Dashboard Fetching:** Verify/update `InvestorDashboard.tsx`... (Done - Already implemented)
    5.  **(Optional but Recommended) Disable/Remove MSW Handlers:** Comment out or remove the MSW handlers... (Done)
    6.  **Implement RLS:** Ensure basic Row Level Security policies are active... (**Action Required:** Apply SQL policies manually in Supabase & Verify).
    7.  **Update Task Definition:** Add this task definition. (Done)
    8.  **Commit:** Commit changes incrementally... (Done for code changes)

---

## Task 10: Implement AI Analysis Generation (`request-analysis` Edge Function)

*   **Status:** Done (Blocked by Env Var Issue)
*   **Goal:** Develop the core logic for the `request-analysis` Supabase Edge Function to generate a comprehensive AI analysis for a given startup based on its profile data.
*   **Summary:** Implemented logic within `request-analysis/index.ts` to fetch startup data, build a detailed prompt, call the Google AI Gemini model (requesting JSON output), parse the response, and store the structured `ai_analysis` JSON in the `startups` table. Updated `analysis_status` and `analysis_timestamp` fields accordingly. Added error handling. **NOTE:** Function deployment is currently blocked by a persistent linter/runtime error related to accessing environment variables (`Deno.env.get`) within the Edge Function context.
*   **Detailed Steps:**
    1.  **Function Signature & Input:** Define function to accept `startup_id`... (Done)
    2.  **Fetch Startup Data:** Retrieve the full `StartupProfile`... (Done)
    3.  **Update Status (Initial):** Set `analysis_status` to `'processing'`... (Done)
    4.  **Define Analysis Sections & Prompts:** Create specific prompts... (Done - Integrated into `buildAnalysisPrompt`)
    5.  **Iterative AI Calls:** Loop through the defined sections... (Done - Single comprehensive call implemented)
    6.  **Consolidate Results:** Combine the parsed results... (Done - Single JSON object generated)
    7.  **Store Results & Update Status (Final):** Update the `startups` table... (Done)
    8.  **Error Handling:** Implement robust error handling... (Done)
    9.  **Return Response:** Return a success or error message... (Done)
    10. **Update Task Definition:** Add this task definition. (Done)
    11. **Commit:** Commit changes. (Done - Code written)

---

## Task 11: Display AI Analysis Results & Realtime Updates (Frontend)

*   **Status:** Done
*   **Goal:** Update the Startup Dashboard UI to display the generated AI analysis results stored in the database and reflect the analysis status (`pending`, `processing`, `completed`, `error`) in real-time.
*   **Summary:** Updated `StartupDashboard` to parse `ai_analysis` JSON and pass props correctly to child components. Enhanced `AIInsightsSection` to render detailed analysis sections (Summary, SWOT, Market Pos., Scalability, Comp. Advantage, Challenges, KPIs, Recommendations, Funding Outlook) based on `analysisData` and `analysis_status`. Verified `FinancialPerformanceCard`, `GrowthPlanCard`, and `ProjectionsRisksCard` already handle relevant analysis data display. Confirmed `AIInsightsSection` manages Realtime updates for analysis status/results. Ensured Refresh button triggers the `request-analysis` function.
*   **Detailed Steps:**
    1.  **Identify Display Component(s):** Determine which component(s)... (Done - `AIInsightsSection` primary, others supplement).
    2.  **Fetch Analysis Data:** Ensure the `fetchStartupData` function... (Done - Verified).
    3.  **Parse and Pass Data:** In `StartupDashboard.tsx`, parse the fetched `ai_analysis` JSON... (Done).
    4.  **Display Logic:** Implement rendering logic within the display component(s)... (Done - Added to `AIInsightsSection`, verified others).
    5.  **Realtime Subscription:** Set up a Supabase Realtime subscription... (Done - Handled within `AIInsightsSection`).
    6.  **Realtime Handler:** When a change notification is received... (Done - Handled within `AIInsightsSection`).
    7.  **Refresh Button Logic:** Ensure any "Refresh Analysis" button correctly calls... (Done).
    8.  **Update Task Definition:** Add this task definition. (Done).
    9.  **Commit:** Commit changes. (Done).

---

## Task 12: Refine Startup Dashboard Display Components (AI Driven)

*   **Status:** Done
*   **Goal:** Ensure the main dashboard provides a complete and accurate snapshot by fully implementing the data display in existing sections, leveraging AI-generated insights for KPIs and Funding Readiness.
*   **Summary:** Updated `request-analysis` function (backend) to include `funding_readiness_score` and justification in the AI analysis. Modified `KeyMetricsSection` (frontend) to display AI-suggested KPIs instead of raw data. Created `FundingReadinessCard` component to display AI score/justification. Integrated `FundingReadinessCard` and relocated `KeyMetricsSection` to the 'Analysis & AI' tab in `StartupDashboard`. Simplified `InvestorInterestSection` to a placeholder message.
*   **Detailed Steps:**
    1.  **Modify `KeyMetricsSection.tsx`:** Change component to display the `suggested_kpis`... (Done)
    2.  **Implement AI Funding Readiness Score (Backend):** Modify the `request-analysis` function prompt... (Done)
    3.  **Create `FundingReadinessCard.tsx` (Frontend):** Develop a new component to display the AI-generated... (Done)
    4.  **Integrate `FundingReadinessCard`:** Add the new `FundingReadinessCard` component... (Done)
    5.  **Relocate `KeyMetricsSection`:** Move the `KeyMetricsSection` component from the 'Overview' tab... (Done)
    6.  **Implement `InvestorInterestSection` (Placeholder/Initial):** Determine initial data source... (Done - Placeholder implemented)
    7.  **Update Task Definition:** Add this revised task definition. (Done)
    8.  **Commit:** Commit changes incrementally. (Done)

---

## Task 13: Merge Edit Profile into Account Settings

*   **Status:** Done
*   **Summary:** Merged user profile editing functionality into the Account Settings area. Moved avatar upload, bio editing, name, and phone editing to `GeneralSettingsTab.tsx`. Created a new `RoleProfileTab.tsx` to handle Startup/Investor specific field editing. Updated `AccountSettingIndex.tsx` to include the new tab conditionally. Simplified `SettingsPage.tsx` to render `AccountSettingIndex`. Removed the old `/app/profile/edit` route, sidebar link, and `EditProfilePage.tsx` file.
*   **Goal:** Consolidate user profile and account management into a single settings area (`/app/settings/account`) using a tabbed interface, connected to the live Supabase backend.
*   **Steps:**
    *   Consolidate core account management (avatar, bio, name, phone, password) in `GeneralSettingsTab.tsx`. (Done)
    *   Create `RoleProfileTab.tsx` for Startup/Investor specific data. (Done)
    *   Integrate `RoleProfileTab` into `AccountSettingIndex.tsx` tabs. (Done)
    *   Update `SettingsPage.tsx` to render `AccountSettingIndex`. (Done)
    *   Remove "Edit Profile" link from `Sidebaritems.ts`. (Done)
    *   Remove `/app/profile/edit` route from `Router.tsx`. (Done)
    *   Delete `EditProfilePage.tsx` file. (Done)
    *   Update task definition in `implementation-plan.mdc`. (Done)
    *   Commit all changes. (Done)

---

## Component Implementation & Integration

-   **Step 1: Implement Authentication**
    -   Setup Supabase Auth (Email/Password, Google OAuth)
    -   Create `AuthContext` for global state management.
    -   Build `LoginPage`, `SignupPage`, `ForgotPasswordPage`.
    -   Implement protected routes.
    -   **Status:** Done
        -   **Summary:** Authentication setup with Supabase (Email/Pass, Google) is complete. `AuthContext` manages state. Login, Signup, Forgot Password pages built. Protected routes implemented.

-   **Step 2: Setup User Roles & Initial Profile Creation**
    -   Create Supabase tables (`users`, `roles`, `user_roles`).
    -   Implement logic during signup to assign a default role (e.g., 'pending_selection').
    -   Create `RoleSelectionPage` after signup.
    -   Create basic `investor_profiles` and `startup_profiles` tables.
    -   Implement logic to create a basic profile entry when a role is selected.
    -   **Status:** Done
        -   **Summary:** Tables for users, roles, and profiles created. Signup assigns 'pending_selection', `RoleSelectionPage` allows role choice, basic profile entry created upon selection.

-   **Step 3: Build Core Dashboard Layout**
    -   Implement main `AppLayout` (Sidebar, Header, Content Area) based on MaterialM structure.
    -   Fetch user role and display relevant sidebar links.
    -   Create basic `InvestorDashboard` and `StartupDashboard` components.
    -   **Status:** Done
        -   **Summary:** Core `AppLayout` with Sidebar, Header, and Content area is built using MaterialM structure. Sidebar links dynamically adapt based on user role. Basic dashboard components created.

-   **Step 4: Implement Profile Management (Account Settings)**
    -   Build `AccountSettingsPage` accessible from the dashboard header/sidebar.
    -   Include tabs/sections for:
        -   User Profile (Name, contact, basic info)
        -   Security (Password change)
    -   Implement forms and Supabase logic to update user details (users table) and profile details (`investor_profiles` or `startup_profiles`).
    -   Integrate profile picture upload (Supabase Storage).
    -   **Status:** Done
        -   **Summary:** `AccountSettingsPage` created with User Profile and Security sections. Forms connect to Supabase for updating user and profile tables. Profile picture upload is functional.

-   **Step 5: Investor Dashboard - Core Features**
    -   Display Investor Profile summary card.
    -   Implement `DealFlowSection` (placeholder for now).
    -   Implement `WatchlistSection` (placeholder for now).
    -   Implement `MarketInsightsSection` (placeholder for now).
    -   **Status:** Done
        -   **Summary:** Reviewed `InvestorDashboard.tsx`. `InvestorProfileCard` is integrated. Other sections (`DealFlow`, `Watchlist`, `MarketInsights`) remain placeholders as corresponding components don't exist yet.

-   **Step 6: Startup Dashboard - Core Features**
    -   Display Startup Profile summary card.
    -   Implement `FundingStatusSection` (placeholder).
    -   Implement `InvestorMatchSection` (placeholder).
    -   Implement `PitchDeckManagementSection` (placeholder).
    -   **Status:** Pending

-   **Step 7: AI Integration - Startup Suggestions (Investor)**
    -   Develop backend function (e.g., Supabase Edge Function) to analyze investor preferences and startup data.
    -   Implement logic to call OpenAI API for analysis/matching.
    -   Create `AISuggestions` component/section on Investor Dashboard.
    -   Display matched startups with reasoning.
    -   **Status:** Pending

-   **Step 8: AI Integration - Investor Recommendations (Startup)**
    -   Develop backend function to analyze startup profile and investor criteria.
    -   Implement logic to call OpenAI API for recommendations.
    -   Display recommended investors on Startup Dashboard.
    -   **Status:** Pending

-   **Step 9: Implement Search & Filtering**
    -   Add search functionality for startups (investors) / investors (startups).
    -   Implement filters based on industry, stage, location, etc.
    -   **Status:** Pending

-   **Step 10: Notifications System**
    -   Design DB schema for notifications.
    -   Implement backend logic to generate notifications (new matches, status updates).
    -   Create UI component for displaying notifications.
    -   **Status:** Pending

-   **Step 11: Refinement & Testing**
    -   Conduct thorough manual testing of all features and user flows.
    -   Address UI inconsistencies and bugs.
    -   Optimize performance (DB queries, component rendering).
    -   **Status:** Pending

-   **Step 12: Deployment**
    -   Configure deployment environment (e.g., Vercel, Netlify).
    -   Set up environment variables.
    -   Deploy frontend and backend (Supabase).
    -   **Status:** Pending

--- 